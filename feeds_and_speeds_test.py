#!/usr/bin/env python3
"""Make feeds and speeds gcode."""

import argparse
from pathlib import Path
import jinja2

DEFAULT_TEMPLATE_DIR = Path(__file__).parent / 'templates'


# a key/value class
class KeyValue(argparse.Action):
    # Constructor calling
    def __call__( self , parser, namespace, values, option_string = None):
        setattr(namespace, self.dest, dict())
          
        for value in values:
            # split it into key and value
            key, value = value.split('=')
            # assign into dictionary
            getattr(namespace, self.dest)[key] = float(value)
  
# creating parser object
parser = argparse.ArgumentParser()


def main():
    "Run as a script."
    parser = argparse.ArgumentParser(description='Make speed and feeds test gcode')
    parser.add_argument('-d', '--template-dir', action='append', default=[DEFAULT_TEMPLATE_DIR], help='The template directory in which to look for templates. This option may be added multiple times to add multiple directories. Default: %(default)s')
    parser.add_argument('-t', '--template', required=True, help='The template to use to generate the output.')
    parser.add_argument('-v', '--values', nargs='*', action=KeyValue, default=dict(), help='Values of the form key=value, where value is a float.')

    parser.add_argument('output_file', type=Path, help='The output file to write')
    args = parser.parse_args()

    # Load template
    loader = jinja2.FileSystemLoader(args.template_dir)
    environment = jinja2.Environment(loader=loader, undefined=jinja2.StrictUndefined)

    template = environment.get_template(args.template)

    print(args.values)

    content = template.render(
            autogenerate_warning=f"DO NOT EDIT! This file was autogenerated by { __file__ } from the template file { template.filename }",
            **args.values
        )

    with open(args.output_file, 'w') as f:
        f.write(content)

if __name__ == "__main__":
    main()